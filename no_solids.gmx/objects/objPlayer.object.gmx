<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement
xSpeed = 0
ySpeed = 0

djump = true
frozen = false

// Only one block per step is allowed to carry the player horizontally on top of a block.
// (e.g. there's a block moving at speed 3 and another one at speed 6 - the player should never move at speed 9)
carriedXOnTop = false


// Setting image_xscale = -1 causes weird collision behavior, so we use this variable instead.
xScale = 1

debugDrawMask = false


// Constants
yGravity = 0.4

jumpSpeed = 8.5
djumpSpeed = 7
jumpReleaseFactor = 0.45

maxXSpeed = 3
maxYSpeed = 9

vineJumpXSpeed = 15
vineJumpYSpeed = 9
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var onVineLeft = place_meeting(x - 1, y, objVineRight)
var onVineRight = place_meeting(x + 1, y, objVineLeft)

var leftDown = scrButtonCheck(global.leftButton)
var rightDown = scrButtonCheck(global.rightButton)

var grounded = place_meeting(x, y + global.grav, objBlock)
        or wouldPressAgainstOneWayWall(0, global.grav) != noone


if leftDown or rightDown {
    if rightDown xScale = 1
    else if leftDown xScale = -1
}

if onVineLeft or onVineRight {
    if onVineLeft xScale = 1
    else xScale = -1
    
    sprite_index = sprPlayerSliding
    image_speed = 1 / 2
}
else if grounded {
    if leftDown or rightDown {
        sprite_index = sprPlayerRunning
        image_speed = 1 / 2
    } else {
        sprite_index = sprPlayerIdle
        image_speed = 1 / 5
    }
}
else {
    if ySpeed * global.grav &lt; 0 {
        sprite_index = sprPlayerJump
        image_speed = 1 / 2
    } else {
        sprite_index = sprPlayerFall
        image_speed = 1 / 2
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var leftDown = scrButtonCheck(global.leftButton)
var rightDown = scrButtonCheck(global.rightButton)

var jumpDown = scrButtonCheck(global.jumpButton)
var jumpPressed = scrButtonCheckPressed(global.jumpButton)
var jumpReleased = scrButtonCheckReleased(global.jumpButton)


var onVineLeft = place_meeting(x - 1, y, objVineRight)
var onVineRight = place_meeting(x + 1, y, objVineLeft)


xSpeed = 0
runningSprite = false

if not frozen {
    if rightDown xSpeed = maxXSpeed
    else if leftDown xSpeed = -maxXSpeed
    
    
    if jumpPressed {
        // Single jump
        if place_meeting(x, y + global.grav, objBlock)
                or place_meeting(x, y, objPlatform) // Allow "platform jumping"
                or wouldPressAgainstOneWayWall(0, global.grav) != noone {
            ySpeed = -jumpSpeed * global.grav
            djump = true
        }

        // Double jump
        else if djump {
            ySpeed = -djumpSpeed * global.grav
            djump = false
        }
    }
    
    // Release jump
    // Note that pressing and releasing jump on the same frame is a jump cancel
    if jumpReleased and ySpeed * global.grav &lt; 0 {
        ySpeed *= jumpReleaseFactor
    }
}


if global.grav == 1 and ySpeed &gt; maxYSpeed {
    ySpeed = maxYSpeed
}
else if global.grav == -1 and ySpeed &lt; -maxYSpeed {
    ySpeed = -maxYSpeed
}


if onVineLeft or onVineRight {
    xSpeed = 0
    
    //ySpeed = 2 * global.grav
    ySpeed = -yGravity * global.grav
    
    if not frozen and ((onVineLeft and rightDown) or (onVineRight and leftDown)) {
        // Vine jump
        if jumpDown {
            if onVineRight xSpeed = -vineJumpXSpeed
            else xSpeed = vineJumpXSpeed
            
            ySpeed = -vineJumpYSpeed * global.grav
        }
        // Fall off the vine
        else {
            if onVineRight xSpeed = -maxXSpeed
            else xSpeed = maxXSpeed
        }
    }
}

// [End of standard engine player step event]


ySpeed += yGravity * global.grav


// This section is adapted from the standard engine's objPlayer collision with objBlock event
if moveContactSolidsOnlyIfPress(xSpeed, 0) {
    xSpeed = 0
}

if moveContactSolidsOnlyIfPress(0, ySpeed) {
    if (global.grav == 1 and ySpeed &gt; 0) or (global.grav == -1 and ySpeed &lt; 0) {
        djump = true
    }
    
    ySpeed = 0
}

if wouldPressAgainstSolids(xSpeed, ySpeed) {
    xSpeed = 0
}

x += xSpeed
y += ySpeed


// If we just jumped up through a one-way wall, snap to standing on top of it
if ySpeed * global.grav &lt; 0 {
    var jumpedThrough = wouldPressAgainstOneWayWall(0, -ySpeed)
    
    if jumpedThrough != noone {
        var height = sprite_get_height(mask_index)
        
        if global.grav == 1 {
            y = jumpedThrough.bbox_top - ceil(height / 2)
        } else {
            y = jumpedThrough.bbox_bottom + ceil(height / 2)
        }
        
        ySpeed = 0
    }
}


carriedXOnTop = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrKillPlayer()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Round drawing position to fix strange drawing when on a 0.5 X position
var drawX = floor(x + 0.5)
var drawY = floor(y + 0.5)

// (Copied from Yoyo engine) We need to offset player by 1 pixel with reverse gravity for some reason.
if global.grav == -1 {
    drawY++
}

draw_sprite_ext(sprite_index, image_index, drawX, drawY, xScale, global.grav, image_angle, image_blend, image_alpha)

if debugDrawMask {
    draw_sprite_ext(mask_index, image_index, drawX, drawY, xScale, global.grav, image_angle, image_blend, image_alpha)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
