<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump = 8.5
jump2 = 7
gravity = 0.4 * global.grav
maxSpeed = 3
maxVSpeed = 9

vineJumpHSpeed = 15
vineJumpVSpeed = 9

djump = true
onPlatform = false
frozen = false

xScale = 1

//riding = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

// Be carried by the instance we're riding.

if instance_exists(riding) {
    var dX = riding.x - riding.xprevious
    var dY = riding.y - riding.yprevious
    
    if not pushedX and dX != 0 {
        scrMoveContactObject(dX, 0, objBlock)
        riding.image_blend = c_aqua
    }
    
    // riding upwards causes issues. pushing upwards should handle it already.
    if not pushedY and dY != 0 { // dY*global.grav &gt; 0
        scrMoveContactObject(0, dY, objBlock)
        riding.image_blend = c_aqua
    }
}

// Snap to platforms
var platLast = instance_place(xprevious, yprevious, objPlatform)
var platCurrent = instance_place(x, y, objPlatform)
if platLast != noone
        and platCurrent != platLast
        and y &lt; yprevious {
    y = platLast.bbox_top - (sprite_height-sprite_get_yoffset(mask_index))
    vspeed = 0
    djump = true
}

if platCurrent != platLast
        and platCurrent != noone
        and not place_meeting(x, yprevious, platCurrent)
        and y &gt; yprevious {
    y = platCurrent.bbox_top - (sprite_height-sprite_get_yoffset(mask_index))
    vspeed = 0
    djump = true
}

// Collide with obstacles now after we've moved.

if place_meeting(x, y, objPlayerKiller) {
    scrKillPlayer()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var blockOn = instance_place(x, y + global.grav, objBlock)

/*

// Reset pushed flags and update the riding object.

pushedX = false
pushedY = false
riding = noone
if vspeed*global.grav &gt;= 0 {
    riding = blockOn
    if riding == noone {
        riding = instance_place(x, y+global.grav, objPlatform)
    }
}


// Snap to riding object's fractional x coordinate.

if instance_exists(riding) {
    var fraction = riding.x - floor(riding.x)
    var myFraction = x - floor(x)
    
    if fraction != myFraction {
        //show_debug_message('setting fractional x: '+string(fraction)+'    '+string(myFraction))
        
        // .1 to .2, and .2 to .1
        if abs(fraction - myFraction) &lt;= 0.5 {
            x = floor(x) + fraction
        } else {
            // .1 to .8
            if fraction &gt; myFraction {
                x = floor(x)-1 + fraction
            // .9 to .2
            } else {
                x = floor(x)+1 + fraction
            }
        }
           
        xprevious = x
    }
}
*/


if onPlatform {
    if not place_meeting(x, y + 4 * global.grav, objPlatform) {
        onPlatform = false
    }
}


var leftDown = scrButtonCheck(global.leftButton)
var leftPressed = scrButtonCheckPressed(global.leftButton)

var rightDown = scrButtonCheck(global.rightButton)
var rightPressed = scrButtonCheckPressed(global.rightButton)

var jumpDown = scrButtonCheck(global.jumpButton)
var jumpPressed = scrButtonCheckPressed(global.jumpButton)
var jumpReleased = scrButtonCheckReleased(global.jumpButton)


var h = 0
if not frozen {
    if rightDown h = 1
    else if leftDown h = -1
}

var onVineL = place_meeting(x - 1, y, objVineL) and blockOn == noone
var onVineR = place_meeting(x + 1, y, objVineR) and blockOn == noone

if h != 0 {
    if not onVineR and not onVineL {
        xScale = h
    }
    if (h == -1 and not onVineR) or (h == 1 and not onVineL) {
        hspeed = maxSpeed * h
    }
} else {
    hspeed = 0
}


if global.grav == 1 and vspeed &gt; maxVSpeed {
    vspeed = maxVSpeed
} else if global.grav == -1 and vspeed &lt; -maxVSpeed {
    vspeed = -maxVSpeed
}


if not frozen {
    if jumpPressed {
        // Single jump
        if place_meeting(x, y + global.grav, objBlock) or onPlatform or place_meeting(x, y + global.grav, objPlatform) {
            vspeed = -jump * global.grav
            djump = true
            onPlatform = false
        }

        // Double jump
        else if djump {
            vspeed = -jump2 * global.grav
            djump = false
        }
    }
    
    // Slow down your jump
    // Note that jumping and slowing your jump on the same frame is a "jump cancel"
    if jumpReleased and vspeed * global.grav &lt; 0 {
        vspeed *= 0.45
    }
}


if onVineL or onVineR {
    if onVineR xScale = -1
    else xScale = 1
    
    vspeed = 2 * global.grav
    
    if (onVineL and rightPressed) or (onVineR and leftPressed) {
        if jumpDown {
            if onVineR hspeed = -vineJumpHSpeed
            else hspeed = vineJumpHSpeed
            
            vspeed = -vineJumpVSpeed * global.grav
        }
        else {
            if onVineR hspeed = -maxSpeed
            else hspeed = maxSpeed
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// We need to offset player by 1 pixel with reverse gravity for some reason.
var drawY = y
if global.grav == -1 {
    drawY ++
}

draw_sprite_ext(mask_index, image_index, x, drawY, xScale, global.grav, 0, c_white, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
